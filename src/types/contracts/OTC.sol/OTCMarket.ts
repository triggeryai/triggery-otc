/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace OTCMarket {
  export type EthListingStruct = {
    buyer: string;
    amountEth: BigNumberish;
    tokenAddress: string;
    tokenAmountWanted: BigNumberish;
  };

  export type EthListingStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    buyer: string;
    amountEth: BigNumber;
    tokenAddress: string;
    tokenAmountWanted: BigNumber;
  };

  export type EthListingWithIdStruct = {
    listingId: BigNumberish;
    listing: OTCMarket.EthListingStruct;
  };

  export type EthListingWithIdStructOutput = [
    BigNumber,
    OTCMarket.EthListingStructOutput
  ] & { listingId: BigNumber; listing: OTCMarket.EthListingStructOutput };

  export type TokenListingStruct = {
    seller: string;
    tokenAddress: string;
    amount: BigNumberish;
    price: BigNumberish;
  };

  export type TokenListingStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    seller: string;
    tokenAddress: string;
    amount: BigNumber;
    price: BigNumber;
  };

  export type TokenListingWithIdStruct = {
    listingId: BigNumberish;
    listing: OTCMarket.TokenListingStruct;
  };

  export type TokenListingWithIdStructOutput = [
    BigNumber,
    OTCMarket.TokenListingStructOutput
  ] & { listingId: BigNumber; listing: OTCMarket.TokenListingStructOutput };
}

export interface OTCMarketInterface extends utils.Interface {
  functions: {
    "cancelListing(uint256,bool)": FunctionFragment;
    "cancelListingByOwner(uint256,bool)": FunctionFragment;
    "ethListings(uint256)": FunctionFragment;
    "getActiveEthListings()": FunctionFragment;
    "getActiveTokenListings()": FunctionFragment;
    "listEthForTokens(address,uint256)": FunctionFragment;
    "listTokenForSale(address,uint256,uint256)": FunctionFragment;
    "nextEthListingId()": FunctionFragment;
    "nextTokenListingId()": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseETHWithTokens(uint256,uint256)": FunctionFragment;
    "purchaseTokenWithEth(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenListings(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelListing"
      | "cancelListingByOwner"
      | "ethListings"
      | "getActiveEthListings"
      | "getActiveTokenListings"
      | "listEthForTokens"
      | "listTokenForSale"
      | "nextEthListingId"
      | "nextTokenListingId"
      | "owner"
      | "purchaseETHWithTokens"
      | "purchaseTokenWithEth"
      | "renounceOwnership"
      | "tokenListings"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListingByOwner",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ethListings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveEthListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTokenListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listEthForTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listTokenForSale",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextEthListingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenListingId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseETHWithTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTokenWithEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenListings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListingByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveEthListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTokenListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listEthForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listTokenForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEthListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseETHWithTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTokenWithEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "EthListed(uint256,address,uint256,address,uint256)": EventFragment;
    "ListingCancelled(uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PurchasedWithEth(uint256,address,uint256)": EventFragment;
    "PurchasedWithToken(uint256,address,uint256,uint256)": EventFragment;
    "TokenListed(uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchasedWithEth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchasedWithToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenListed"): EventFragment;
}

export interface EthListedEventObject {
  listingId: BigNumber;
  buyer: string;
  amountEth: BigNumber;
  tokenAddress: string;
  tokenAmountWanted: BigNumber;
}
export type EthListedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber],
  EthListedEventObject
>;

export type EthListedEventFilter = TypedEventFilter<EthListedEvent>;

export interface ListingCancelledEventObject {
  listingId: BigNumber;
  isTokenListing: boolean;
}
export type ListingCancelledEvent = TypedEvent<
  [BigNumber, boolean],
  ListingCancelledEventObject
>;

export type ListingCancelledEventFilter =
  TypedEventFilter<ListingCancelledEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PurchasedWithEthEventObject {
  listingId: BigNumber;
  seller: string;
  amountEth: BigNumber;
}
export type PurchasedWithEthEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PurchasedWithEthEventObject
>;

export type PurchasedWithEthEventFilter =
  TypedEventFilter<PurchasedWithEthEvent>;

export interface PurchasedWithTokenEventObject {
  listingId: BigNumber;
  buyer: string;
  amount: BigNumber;
  price: BigNumber;
}
export type PurchasedWithTokenEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  PurchasedWithTokenEventObject
>;

export type PurchasedWithTokenEventFilter =
  TypedEventFilter<PurchasedWithTokenEvent>;

export interface TokenListedEventObject {
  listingId: BigNumber;
  seller: string;
  amount: BigNumber;
  price: BigNumber;
}
export type TokenListedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  TokenListedEventObject
>;

export type TokenListedEventFilter = TypedEventFilter<TokenListedEvent>;

export interface OTCMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OTCMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelListing(
      _listingId: BigNumberish,
      isTokenListing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelListingByOwner(
      _listingId: BigNumberish,
      isTokenListing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ethListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        buyer: string;
        amountEth: BigNumber;
        tokenAddress: string;
        tokenAmountWanted: BigNumber;
      }
    >;

    getActiveEthListings(
      overrides?: CallOverrides
    ): Promise<[OTCMarket.EthListingWithIdStructOutput[]]>;

    getActiveTokenListings(
      overrides?: CallOverrides
    ): Promise<[OTCMarket.TokenListingWithIdStructOutput[]]>;

    listEthForTokens(
      _tokenAddress: string,
      _tokenAmountWanted: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    listTokenForSale(
      _tokenAddress: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nextEthListingId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextTokenListingId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseETHWithTokens(
      ethListingId: BigNumberish,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    purchaseTokenWithEth(
      _listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        seller: string;
        tokenAddress: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  cancelListing(
    _listingId: BigNumberish,
    isTokenListing: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelListingByOwner(
    _listingId: BigNumberish,
    isTokenListing: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ethListings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber] & {
      buyer: string;
      amountEth: BigNumber;
      tokenAddress: string;
      tokenAmountWanted: BigNumber;
    }
  >;

  getActiveEthListings(
    overrides?: CallOverrides
  ): Promise<OTCMarket.EthListingWithIdStructOutput[]>;

  getActiveTokenListings(
    overrides?: CallOverrides
  ): Promise<OTCMarket.TokenListingWithIdStructOutput[]>;

  listEthForTokens(
    _tokenAddress: string,
    _tokenAmountWanted: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  listTokenForSale(
    _tokenAddress: string,
    _amount: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nextEthListingId(overrides?: CallOverrides): Promise<BigNumber>;

  nextTokenListingId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseETHWithTokens(
    ethListingId: BigNumberish,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  purchaseTokenWithEth(
    _listingId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenListings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      seller: string;
      tokenAddress: string;
      amount: BigNumber;
      price: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelListing(
      _listingId: BigNumberish,
      isTokenListing: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListingByOwner(
      _listingId: BigNumberish,
      isTokenListing: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ethListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        buyer: string;
        amountEth: BigNumber;
        tokenAddress: string;
        tokenAmountWanted: BigNumber;
      }
    >;

    getActiveEthListings(
      overrides?: CallOverrides
    ): Promise<OTCMarket.EthListingWithIdStructOutput[]>;

    getActiveTokenListings(
      overrides?: CallOverrides
    ): Promise<OTCMarket.TokenListingWithIdStructOutput[]>;

    listEthForTokens(
      _tokenAddress: string,
      _tokenAmountWanted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    listTokenForSale(
      _tokenAddress: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nextEthListingId(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenListingId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseETHWithTokens(
      ethListingId: BigNumberish,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseTokenWithEth(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokenListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        seller: string;
        tokenAddress: string;
        amount: BigNumber;
        price: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EthListed(uint256,address,uint256,address,uint256)"(
      listingId?: BigNumberish | null,
      buyer?: string | null,
      amountEth?: null,
      tokenAddress?: null,
      tokenAmountWanted?: null
    ): EthListedEventFilter;
    EthListed(
      listingId?: BigNumberish | null,
      buyer?: string | null,
      amountEth?: null,
      tokenAddress?: null,
      tokenAmountWanted?: null
    ): EthListedEventFilter;

    "ListingCancelled(uint256,bool)"(
      listingId?: BigNumberish | null,
      isTokenListing?: null
    ): ListingCancelledEventFilter;
    ListingCancelled(
      listingId?: BigNumberish | null,
      isTokenListing?: null
    ): ListingCancelledEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PurchasedWithEth(uint256,address,uint256)"(
      listingId?: BigNumberish | null,
      seller?: string | null,
      amountEth?: null
    ): PurchasedWithEthEventFilter;
    PurchasedWithEth(
      listingId?: BigNumberish | null,
      seller?: string | null,
      amountEth?: null
    ): PurchasedWithEthEventFilter;

    "PurchasedWithToken(uint256,address,uint256,uint256)"(
      listingId?: BigNumberish | null,
      buyer?: string | null,
      amount?: null,
      price?: null
    ): PurchasedWithTokenEventFilter;
    PurchasedWithToken(
      listingId?: BigNumberish | null,
      buyer?: string | null,
      amount?: null,
      price?: null
    ): PurchasedWithTokenEventFilter;

    "TokenListed(uint256,address,uint256,uint256)"(
      listingId?: BigNumberish | null,
      seller?: string | null,
      amount?: null,
      price?: null
    ): TokenListedEventFilter;
    TokenListed(
      listingId?: BigNumberish | null,
      seller?: string | null,
      amount?: null,
      price?: null
    ): TokenListedEventFilter;
  };

  estimateGas: {
    cancelListing(
      _listingId: BigNumberish,
      isTokenListing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelListingByOwner(
      _listingId: BigNumberish,
      isTokenListing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ethListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveEthListings(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveTokenListings(overrides?: CallOverrides): Promise<BigNumber>;

    listEthForTokens(
      _tokenAddress: string,
      _tokenAmountWanted: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    listTokenForSale(
      _tokenAddress: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nextEthListingId(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenListingId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseETHWithTokens(
      ethListingId: BigNumberish,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    purchaseTokenWithEth(
      _listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelListing(
      _listingId: BigNumberish,
      isTokenListing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelListingByOwner(
      _listingId: BigNumberish,
      isTokenListing: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ethListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveEthListings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveTokenListings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listEthForTokens(
      _tokenAddress: string,
      _tokenAmountWanted: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    listTokenForSale(
      _tokenAddress: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nextEthListingId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextTokenListingId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseETHWithTokens(
      ethListingId: BigNumberish,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    purchaseTokenWithEth(
      _listingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenListings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
